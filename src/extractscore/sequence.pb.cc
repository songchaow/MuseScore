// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sequence.proto

#include "sequence.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sequence_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Note_sequence_2eproto;
namespace museprotocol {
class NoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Note> _instance;
} _Note_default_instance_;
class SegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Segment> _instance;
} _Segment_default_instance_;
}  // namespace museprotocol
static void InitDefaultsscc_info_Note_sequence_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::museprotocol::_Note_default_instance_;
    new (ptr) ::museprotocol::Note();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Note_sequence_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Note_sequence_2eproto}, {}};

static void InitDefaultsscc_info_Segment_sequence_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::museprotocol::_Segment_default_instance_;
    new (ptr) ::museprotocol::Segment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Segment_sequence_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Segment_sequence_2eproto}, {
      &scc_info_Note_sequence_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sequence_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sequence_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sequence_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sequence_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::museprotocol::Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::museprotocol::Note, pitch_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Note, duration_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Note, instrument_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Note, vol_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Note, pizz_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Note, tr_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Note, tr_last_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::museprotocol::Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::museprotocol::Segment, pbar_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Segment, poffset_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Segment, note_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Segment, cb_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Segment, ctype_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Segment, volchange_),
  PROTOBUF_FIELD_OFFSET(::museprotocol::Segment, speed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::museprotocol::Note)},
  { 12, -1, sizeof(::museprotocol::Segment)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::museprotocol::_Note_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::museprotocol::_Segment_default_instance_),
};

const char descriptor_table_protodef_sequence_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016sequence.proto\022\014museprotocol\"\377\004\n\004Note\022"
  "\r\n\005pitch\030\001 \001(\r\022\020\n\010duration\030\002 \001(\r\0221\n\ninst"
  "rument\030\003 \001(\0162\035.museprotocol.Note.Instrum"
  "ent\022&\n\003vol\030\004 \001(\0162\031.museprotocol.Note.Vol"
  "ume\022\014\n\004pizz\030\007 \001(\010\022\n\n\002tr\030\010 \001(\010\022\017\n\007tr_last"
  "\030\t \001(\010\"\205\003\n\nInstrument\022\t\n\005Flute\020\000\022\010\n\004Oboe"
  "\020\001\022\014\n\010Clarinet\020\002\022\n\n\006Basson\020\003\022\013\n\007Violins\020"
  "\004\022\020\n\014Violins_pizz\020\005\022\020\n\014Violins_trem\020\006\022\n\n"
  "\006Violas\020\007\022\017\n\013Violas_pizz\020\010\022\017\n\013Violas_tre"
  "m\020\t\022\020\n\014Violoncellos\020\n\022\025\n\021Violoncellos_pi"
  "zz\020\013\022\025\n\021Violoncellos_trem\020\014\022\020\n\014Contrabas"
  "ses\020\r\022\025\n\021Contrabasses_pizz\020\016\022\025\n\021Contraba"
  "sses_trem\020\017\022\013\n\007Trumpet\020\020\022\010\n\004Horn\020\021\022\014\n\010Tr"
  "ombone\020\022\022\010\n\004Tuba\020\023\022\010\n\004Harp\020\024\022\t\n\005Piano\020\025\022"
  "\014\n\010Triangle\020\026\022\013\n\007Timpany\020\027\022\n\n\006Cymbal\020\030\"H"
  "\n\006Volume\022\006\n\002MF\020\000\022\007\n\003PPP\020\001\022\006\n\002PP\020\002\022\005\n\001P\020\003"
  "\022\006\n\002MP\020\004\022\005\n\001F\020\005\022\006\n\002FF\020\006\022\007\n\003FFF\020\007\"\250\004\n\007Seg"
  "ment\022\014\n\004pBar\030\001 \001(\r\022\017\n\007pOffset\030\002 \001(\r\022 \n\004n"
  "ote\030\003 \003(\0132\022.museprotocol.Note\022+\n\002cb\030\004 \001("
  "\0162\037.museprotocol.Segment.ChordBase\0221\n\005ct"
  "ype\030\005 \001(\0162\".museprotocol.Segment.ChordSu"
  "bType\0225\n\tvolchange\030\006 \001(\0162\".museprotocol."
  "Segment.VolumeChange\022\r\n\005speed\030\007 \001(\005\"\211\001\n\t"
  "ChordBase\022\017\n\013NOT_CHANGED\020\000\022\005\n\001A\020\001\022\n\n\006ASh"
  "arp\020\002\022\005\n\001B\020\003\022\005\n\001C\020\004\022\n\n\006CSharp\020\005\022\005\n\001D\020\006\022\n"
  "\n\006DSharp\020\007\022\005\n\001E\020\010\022\005\n\001F\020\t\022\n\n\006FSharp\020\n\022\005\n\001"
  "G\020\013\022\n\n\006GSharp\020\014\"V\n\014ChordSubType\022\t\n\005Major"
  "\020\000\022\t\n\005Minor\020\001\022\014\n\010Dominant\020\002\022\016\n\nDiminishe"
  "d\020\003\022\022\n\016HalfDiminished\020\004\"R\n\014VolumeChange\022"
  "\010\n\004None\020\000\022\r\n\tCrescendo\020\001\022\022\n\016CrescendoLar"
  "ge\020\002\022\007\n\003Dim\020\003\022\014\n\010DimLarge\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sequence_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sequence_2eproto_sccs[2] = {
  &scc_info_Note_sequence_2eproto.base,
  &scc_info_Segment_sequence_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sequence_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sequence_2eproto = {
  false, false, descriptor_table_protodef_sequence_2eproto, "sequence.proto", 1235,
  &descriptor_table_sequence_2eproto_once, descriptor_table_sequence_2eproto_sccs, descriptor_table_sequence_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_sequence_2eproto::offsets,
  file_level_metadata_sequence_2eproto, 2, file_level_enum_descriptors_sequence_2eproto, file_level_service_descriptors_sequence_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sequence_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sequence_2eproto)), true);
namespace museprotocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Note_Instrument_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sequence_2eproto);
  return file_level_enum_descriptors_sequence_2eproto[0];
}
bool Note_Instrument_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Note_Instrument Note::Flute;
constexpr Note_Instrument Note::Oboe;
constexpr Note_Instrument Note::Clarinet;
constexpr Note_Instrument Note::Basson;
constexpr Note_Instrument Note::Violins;
constexpr Note_Instrument Note::Violins_pizz;
constexpr Note_Instrument Note::Violins_trem;
constexpr Note_Instrument Note::Violas;
constexpr Note_Instrument Note::Violas_pizz;
constexpr Note_Instrument Note::Violas_trem;
constexpr Note_Instrument Note::Violoncellos;
constexpr Note_Instrument Note::Violoncellos_pizz;
constexpr Note_Instrument Note::Violoncellos_trem;
constexpr Note_Instrument Note::Contrabasses;
constexpr Note_Instrument Note::Contrabasses_pizz;
constexpr Note_Instrument Note::Contrabasses_trem;
constexpr Note_Instrument Note::Trumpet;
constexpr Note_Instrument Note::Horn;
constexpr Note_Instrument Note::Trombone;
constexpr Note_Instrument Note::Tuba;
constexpr Note_Instrument Note::Harp;
constexpr Note_Instrument Note::Piano;
constexpr Note_Instrument Note::Triangle;
constexpr Note_Instrument Note::Timpany;
constexpr Note_Instrument Note::Cymbal;
constexpr Note_Instrument Note::Instrument_MIN;
constexpr Note_Instrument Note::Instrument_MAX;
constexpr int Note::Instrument_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Note_Volume_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sequence_2eproto);
  return file_level_enum_descriptors_sequence_2eproto[1];
}
bool Note_Volume_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Note_Volume Note::MF;
constexpr Note_Volume Note::PPP;
constexpr Note_Volume Note::PP;
constexpr Note_Volume Note::P;
constexpr Note_Volume Note::MP;
constexpr Note_Volume Note::F;
constexpr Note_Volume Note::FF;
constexpr Note_Volume Note::FFF;
constexpr Note_Volume Note::Volume_MIN;
constexpr Note_Volume Note::Volume_MAX;
constexpr int Note::Volume_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Segment_ChordBase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sequence_2eproto);
  return file_level_enum_descriptors_sequence_2eproto[2];
}
bool Segment_ChordBase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Segment_ChordBase Segment::NOT_CHANGED;
constexpr Segment_ChordBase Segment::A;
constexpr Segment_ChordBase Segment::ASharp;
constexpr Segment_ChordBase Segment::B;
constexpr Segment_ChordBase Segment::C;
constexpr Segment_ChordBase Segment::CSharp;
constexpr Segment_ChordBase Segment::D;
constexpr Segment_ChordBase Segment::DSharp;
constexpr Segment_ChordBase Segment::E;
constexpr Segment_ChordBase Segment::F;
constexpr Segment_ChordBase Segment::FSharp;
constexpr Segment_ChordBase Segment::G;
constexpr Segment_ChordBase Segment::GSharp;
constexpr Segment_ChordBase Segment::ChordBase_MIN;
constexpr Segment_ChordBase Segment::ChordBase_MAX;
constexpr int Segment::ChordBase_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Segment_ChordSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sequence_2eproto);
  return file_level_enum_descriptors_sequence_2eproto[3];
}
bool Segment_ChordSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Segment_ChordSubType Segment::Major;
constexpr Segment_ChordSubType Segment::Minor;
constexpr Segment_ChordSubType Segment::Dominant;
constexpr Segment_ChordSubType Segment::Diminished;
constexpr Segment_ChordSubType Segment::HalfDiminished;
constexpr Segment_ChordSubType Segment::ChordSubType_MIN;
constexpr Segment_ChordSubType Segment::ChordSubType_MAX;
constexpr int Segment::ChordSubType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Segment_VolumeChange_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sequence_2eproto);
  return file_level_enum_descriptors_sequence_2eproto[4];
}
bool Segment_VolumeChange_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Segment_VolumeChange Segment::None;
constexpr Segment_VolumeChange Segment::Crescendo;
constexpr Segment_VolumeChange Segment::CrescendoLarge;
constexpr Segment_VolumeChange Segment::Dim;
constexpr Segment_VolumeChange Segment::DimLarge;
constexpr Segment_VolumeChange Segment::VolumeChange_MIN;
constexpr Segment_VolumeChange Segment::VolumeChange_MAX;
constexpr int Segment::VolumeChange_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Note::_Internal {
 public:
};

Note::Note(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:museprotocol.Note)
}
Note::Note(const Note& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pitch_, &from.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&tr_last_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(tr_last_));
  // @@protoc_insertion_point(copy_constructor:museprotocol.Note)
}

void Note::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tr_last_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(tr_last_));
}

Note::~Note() {
  // @@protoc_insertion_point(destructor:museprotocol.Note)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Note::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Note::ArenaDtor(void* object) {
  Note* _this = reinterpret_cast< Note* >(object);
  (void)_this;
}
void Note::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Note::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Note& Note::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Note_sequence_2eproto.base);
  return *internal_default_instance();
}


void Note::Clear() {
// @@protoc_insertion_point(message_clear_start:museprotocol.Note)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tr_last_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(tr_last_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Note::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .museprotocol.Note.Instrument instrument = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument(static_cast<::museprotocol::Note_Instrument>(val));
        } else goto handle_unusual;
        continue;
      // .museprotocol.Note.Volume vol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vol(static_cast<::museprotocol::Note_Volume>(val));
        } else goto handle_unusual;
        continue;
      // bool pizz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pizz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tr_last = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tr_last_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Note::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:museprotocol.Note)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pitch = 1;
  if (this->pitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pitch(), target);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // .museprotocol.Note.Instrument instrument = 3;
  if (this->instrument() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_instrument(), target);
  }

  // .museprotocol.Note.Volume vol = 4;
  if (this->vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_vol(), target);
  }

  // bool pizz = 7;
  if (this->pizz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_pizz(), target);
  }

  // bool tr = 8;
  if (this->tr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_tr(), target);
  }

  // bool tr_last = 9;
  if (this->tr_last() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_tr_last(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:museprotocol.Note)
  return target;
}

size_t Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:museprotocol.Note)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pitch = 1;
  if (this->pitch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pitch());
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  // .museprotocol.Note.Instrument instrument = 3;
  if (this->instrument() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_instrument());
  }

  // .museprotocol.Note.Volume vol = 4;
  if (this->vol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vol());
  }

  // bool pizz = 7;
  if (this->pizz() != 0) {
    total_size += 1 + 1;
  }

  // bool tr = 8;
  if (this->tr() != 0) {
    total_size += 1 + 1;
  }

  // bool tr_last = 9;
  if (this->tr_last() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Note::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:museprotocol.Note)
  GOOGLE_DCHECK_NE(&from, this);
  const Note* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Note>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:museprotocol.Note)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:museprotocol.Note)
    MergeFrom(*source);
  }
}

void Note::MergeFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:museprotocol.Note)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pitch() != 0) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.instrument() != 0) {
    _internal_set_instrument(from._internal_instrument());
  }
  if (from.vol() != 0) {
    _internal_set_vol(from._internal_vol());
  }
  if (from.pizz() != 0) {
    _internal_set_pizz(from._internal_pizz());
  }
  if (from.tr() != 0) {
    _internal_set_tr(from._internal_tr());
  }
  if (from.tr_last() != 0) {
    _internal_set_tr_last(from._internal_tr_last());
  }
}

void Note::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:museprotocol.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Note::CopyFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:museprotocol.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Note::IsInitialized() const {
  return true;
}

void Note::InternalSwap(Note* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Note, tr_last_)
      + sizeof(Note::tr_last_)
      - PROTOBUF_FIELD_OFFSET(Note, pitch_)>(
          reinterpret_cast<char*>(&pitch_),
          reinterpret_cast<char*>(&other->pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Note::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Segment::_Internal {
 public:
};

Segment::Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  note_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:museprotocol.Segment)
}
Segment::Segment(const Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      note_(from.note_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pbar_, &from.pbar_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&pbar_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:museprotocol.Segment)
}

void Segment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Segment_sequence_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pbar_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&pbar_)) + sizeof(speed_));
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:museprotocol.Segment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Segment::ArenaDtor(void* object) {
  Segment* _this = reinterpret_cast< Segment* >(object);
  (void)_this;
}
void Segment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Segment& Segment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Segment_sequence_2eproto.base);
  return *internal_default_instance();
}


void Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:museprotocol.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  note_.Clear();
  ::memset(&pbar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&pbar_)) + sizeof(speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Segment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pBar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pOffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          poffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .museprotocol.Note note = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_note(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .museprotocol.Segment.ChordBase cb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cb(static_cast<::museprotocol::Segment_ChordBase>(val));
        } else goto handle_unusual;
        continue;
      // .museprotocol.Segment.ChordSubType ctype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ctype(static_cast<::museprotocol::Segment_ChordSubType>(val));
        } else goto handle_unusual;
        continue;
      // .museprotocol.Segment.VolumeChange volchange = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_volchange(static_cast<::museprotocol::Segment_VolumeChange>(val));
        } else goto handle_unusual;
        continue;
      // int32 speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Segment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:museprotocol.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pBar = 1;
  if (this->pbar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pbar(), target);
  }

  // uint32 pOffset = 2;
  if (this->poffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_poffset(), target);
  }

  // repeated .museprotocol.Note note = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_note_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_note(i), target, stream);
  }

  // .museprotocol.Segment.ChordBase cb = 4;
  if (this->cb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_cb(), target);
  }

  // .museprotocol.Segment.ChordSubType ctype = 5;
  if (this->ctype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_ctype(), target);
  }

  // .museprotocol.Segment.VolumeChange volchange = 6;
  if (this->volchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_volchange(), target);
  }

  // int32 speed = 7;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:museprotocol.Segment)
  return target;
}

size_t Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:museprotocol.Segment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .museprotocol.Note note = 3;
  total_size += 1UL * this->_internal_note_size();
  for (const auto& msg : this->note_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 pBar = 1;
  if (this->pbar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pbar());
  }

  // uint32 pOffset = 2;
  if (this->poffset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_poffset());
  }

  // .museprotocol.Segment.ChordBase cb = 4;
  if (this->cb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cb());
  }

  // .museprotocol.Segment.ChordSubType ctype = 5;
  if (this->ctype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ctype());
  }

  // .museprotocol.Segment.VolumeChange volchange = 6;
  if (this->volchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_volchange());
  }

  // int32 speed = 7;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Segment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:museprotocol.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Segment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:museprotocol.Segment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:museprotocol.Segment)
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:museprotocol.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  note_.MergeFrom(from.note_);
  if (from.pbar() != 0) {
    _internal_set_pbar(from._internal_pbar());
  }
  if (from.poffset() != 0) {
    _internal_set_poffset(from._internal_poffset());
  }
  if (from.cb() != 0) {
    _internal_set_cb(from._internal_cb());
  }
  if (from.ctype() != 0) {
    _internal_set_ctype(from._internal_ctype());
  }
  if (from.volchange() != 0) {
    _internal_set_volchange(from._internal_volchange());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
}

void Segment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:museprotocol.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:museprotocol.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  return true;
}

void Segment::InternalSwap(Segment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  note_.InternalSwap(&other->note_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Segment, speed_)
      + sizeof(Segment::speed_)
      - PROTOBUF_FIELD_OFFSET(Segment, pbar_)>(
          reinterpret_cast<char*>(&pbar_),
          reinterpret_cast<char*>(&other->pbar_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Segment::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace museprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::museprotocol::Note* Arena::CreateMaybeMessage< ::museprotocol::Note >(Arena* arena) {
  return Arena::CreateMessageInternal< ::museprotocol::Note >(arena);
}
template<> PROTOBUF_NOINLINE ::museprotocol::Segment* Arena::CreateMaybeMessage< ::museprotocol::Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::museprotocol::Segment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
