// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sequence.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sequence_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sequence_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sequence_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sequence_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sequence_2eproto;
namespace museprotocol {
class Note;
class NoteDefaultTypeInternal;
extern NoteDefaultTypeInternal _Note_default_instance_;
class Segment;
class SegmentDefaultTypeInternal;
extern SegmentDefaultTypeInternal _Segment_default_instance_;
}  // namespace museprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::museprotocol::Note* Arena::CreateMaybeMessage<::museprotocol::Note>(Arena*);
template<> ::museprotocol::Segment* Arena::CreateMaybeMessage<::museprotocol::Segment>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace museprotocol {

enum Note_Instrument : int {
  Note_Instrument_Flute = 0,
  Note_Instrument_Oboe = 1,
  Note_Instrument_Clarinet = 2,
  Note_Instrument_Basson = 3,
  Note_Instrument_Violins = 4,
  Note_Instrument_Violins_pizz = 5,
  Note_Instrument_Violins_trem = 6,
  Note_Instrument_Violas = 7,
  Note_Instrument_Violas_pizz = 8,
  Note_Instrument_Violas_trem = 9,
  Note_Instrument_Violoncellos = 10,
  Note_Instrument_Violoncellos_pizz = 11,
  Note_Instrument_Violoncellos_trem = 12,
  Note_Instrument_Contrabasses = 13,
  Note_Instrument_Contrabasses_pizz = 14,
  Note_Instrument_Contrabasses_trem = 15,
  Note_Instrument_Trumpet = 16,
  Note_Instrument_Horn = 17,
  Note_Instrument_Trombone = 18,
  Note_Instrument_Tuba = 19,
  Note_Instrument_Harp = 20,
  Note_Instrument_Piano = 21,
  Note_Instrument_Triangle = 22,
  Note_Instrument_Timpany = 23,
  Note_Instrument_Cymbal = 24,
  Note_Instrument_Note_Instrument_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Note_Instrument_Note_Instrument_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Note_Instrument_IsValid(int value);
constexpr Note_Instrument Note_Instrument_Instrument_MIN = Note_Instrument_Flute;
constexpr Note_Instrument Note_Instrument_Instrument_MAX = Note_Instrument_Cymbal;
constexpr int Note_Instrument_Instrument_ARRAYSIZE = Note_Instrument_Instrument_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Note_Instrument_descriptor();
template<typename T>
inline const std::string& Note_Instrument_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Note_Instrument>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Note_Instrument_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Note_Instrument_descriptor(), enum_t_value);
}
inline bool Note_Instrument_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Note_Instrument* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Note_Instrument>(
    Note_Instrument_descriptor(), name, value);
}
enum Note_Volume : int {
  Note_Volume_MF = 0,
  Note_Volume_PPP = 1,
  Note_Volume_PP = 2,
  Note_Volume_P = 3,
  Note_Volume_MP = 4,
  Note_Volume_F = 5,
  Note_Volume_FF = 6,
  Note_Volume_FFF = 7,
  Note_Volume_Note_Volume_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Note_Volume_Note_Volume_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Note_Volume_IsValid(int value);
constexpr Note_Volume Note_Volume_Volume_MIN = Note_Volume_MF;
constexpr Note_Volume Note_Volume_Volume_MAX = Note_Volume_FFF;
constexpr int Note_Volume_Volume_ARRAYSIZE = Note_Volume_Volume_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Note_Volume_descriptor();
template<typename T>
inline const std::string& Note_Volume_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Note_Volume>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Note_Volume_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Note_Volume_descriptor(), enum_t_value);
}
inline bool Note_Volume_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Note_Volume* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Note_Volume>(
    Note_Volume_descriptor(), name, value);
}
enum Segment_ChordBase : int {
  Segment_ChordBase_NOT_CHANGED = 0,
  Segment_ChordBase_A = 1,
  Segment_ChordBase_ASharp = 2,
  Segment_ChordBase_B = 3,
  Segment_ChordBase_C = 4,
  Segment_ChordBase_CSharp = 5,
  Segment_ChordBase_D = 6,
  Segment_ChordBase_DSharp = 7,
  Segment_ChordBase_E = 8,
  Segment_ChordBase_F = 9,
  Segment_ChordBase_FSharp = 10,
  Segment_ChordBase_G = 11,
  Segment_ChordBase_GSharp = 12,
  Segment_ChordBase_Segment_ChordBase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Segment_ChordBase_Segment_ChordBase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Segment_ChordBase_IsValid(int value);
constexpr Segment_ChordBase Segment_ChordBase_ChordBase_MIN = Segment_ChordBase_NOT_CHANGED;
constexpr Segment_ChordBase Segment_ChordBase_ChordBase_MAX = Segment_ChordBase_GSharp;
constexpr int Segment_ChordBase_ChordBase_ARRAYSIZE = Segment_ChordBase_ChordBase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Segment_ChordBase_descriptor();
template<typename T>
inline const std::string& Segment_ChordBase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Segment_ChordBase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Segment_ChordBase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Segment_ChordBase_descriptor(), enum_t_value);
}
inline bool Segment_ChordBase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Segment_ChordBase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Segment_ChordBase>(
    Segment_ChordBase_descriptor(), name, value);
}
enum Segment_ChordSubType : int {
  Segment_ChordSubType_Major = 0,
  Segment_ChordSubType_Minor = 1,
  Segment_ChordSubType_Dominant = 2,
  Segment_ChordSubType_Diminished = 3,
  Segment_ChordSubType_HalfDiminished = 4,
  Segment_ChordSubType_Segment_ChordSubType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Segment_ChordSubType_Segment_ChordSubType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Segment_ChordSubType_IsValid(int value);
constexpr Segment_ChordSubType Segment_ChordSubType_ChordSubType_MIN = Segment_ChordSubType_Major;
constexpr Segment_ChordSubType Segment_ChordSubType_ChordSubType_MAX = Segment_ChordSubType_HalfDiminished;
constexpr int Segment_ChordSubType_ChordSubType_ARRAYSIZE = Segment_ChordSubType_ChordSubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Segment_ChordSubType_descriptor();
template<typename T>
inline const std::string& Segment_ChordSubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Segment_ChordSubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Segment_ChordSubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Segment_ChordSubType_descriptor(), enum_t_value);
}
inline bool Segment_ChordSubType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Segment_ChordSubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Segment_ChordSubType>(
    Segment_ChordSubType_descriptor(), name, value);
}
enum Segment_VolumeChange : int {
  Segment_VolumeChange_None = 0,
  Segment_VolumeChange_Crescendo = 1,
  Segment_VolumeChange_CrescendoLarge = 2,
  Segment_VolumeChange_Dim = 3,
  Segment_VolumeChange_DimLarge = 4,
  Segment_VolumeChange_Segment_VolumeChange_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Segment_VolumeChange_Segment_VolumeChange_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Segment_VolumeChange_IsValid(int value);
constexpr Segment_VolumeChange Segment_VolumeChange_VolumeChange_MIN = Segment_VolumeChange_None;
constexpr Segment_VolumeChange Segment_VolumeChange_VolumeChange_MAX = Segment_VolumeChange_DimLarge;
constexpr int Segment_VolumeChange_VolumeChange_ARRAYSIZE = Segment_VolumeChange_VolumeChange_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Segment_VolumeChange_descriptor();
template<typename T>
inline const std::string& Segment_VolumeChange_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Segment_VolumeChange>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Segment_VolumeChange_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Segment_VolumeChange_descriptor(), enum_t_value);
}
inline bool Segment_VolumeChange_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Segment_VolumeChange* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Segment_VolumeChange>(
    Segment_VolumeChange_descriptor(), name, value);
}
// ===================================================================

class Note PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:museprotocol.Note) */ {
 public:
  inline Note() : Note(nullptr) {}
  virtual ~Note();

  Note(const Note& from);
  Note(Note&& from) noexcept
    : Note() {
    *this = ::std::move(from);
  }

  inline Note& operator=(const Note& from) {
    CopyFrom(from);
    return *this;
  }
  inline Note& operator=(Note&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Note& default_instance();

  static inline const Note* internal_default_instance() {
    return reinterpret_cast<const Note*>(
               &_Note_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Note& a, Note& b) {
    a.Swap(&b);
  }
  inline void Swap(Note* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Note* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Note* New() const final {
    return CreateMaybeMessage<Note>(nullptr);
  }

  Note* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Note>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Note& from);
  void MergeFrom(const Note& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Note* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "museprotocol.Note";
  }
  protected:
  explicit Note(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sequence_2eproto);
    return ::descriptor_table_sequence_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Note_Instrument Instrument;
  static constexpr Instrument Flute =
    Note_Instrument_Flute;
  static constexpr Instrument Oboe =
    Note_Instrument_Oboe;
  static constexpr Instrument Clarinet =
    Note_Instrument_Clarinet;
  static constexpr Instrument Basson =
    Note_Instrument_Basson;
  static constexpr Instrument Violins =
    Note_Instrument_Violins;
  static constexpr Instrument Violins_pizz =
    Note_Instrument_Violins_pizz;
  static constexpr Instrument Violins_trem =
    Note_Instrument_Violins_trem;
  static constexpr Instrument Violas =
    Note_Instrument_Violas;
  static constexpr Instrument Violas_pizz =
    Note_Instrument_Violas_pizz;
  static constexpr Instrument Violas_trem =
    Note_Instrument_Violas_trem;
  static constexpr Instrument Violoncellos =
    Note_Instrument_Violoncellos;
  static constexpr Instrument Violoncellos_pizz =
    Note_Instrument_Violoncellos_pizz;
  static constexpr Instrument Violoncellos_trem =
    Note_Instrument_Violoncellos_trem;
  static constexpr Instrument Contrabasses =
    Note_Instrument_Contrabasses;
  static constexpr Instrument Contrabasses_pizz =
    Note_Instrument_Contrabasses_pizz;
  static constexpr Instrument Contrabasses_trem =
    Note_Instrument_Contrabasses_trem;
  static constexpr Instrument Trumpet =
    Note_Instrument_Trumpet;
  static constexpr Instrument Horn =
    Note_Instrument_Horn;
  static constexpr Instrument Trombone =
    Note_Instrument_Trombone;
  static constexpr Instrument Tuba =
    Note_Instrument_Tuba;
  static constexpr Instrument Harp =
    Note_Instrument_Harp;
  static constexpr Instrument Piano =
    Note_Instrument_Piano;
  static constexpr Instrument Triangle =
    Note_Instrument_Triangle;
  static constexpr Instrument Timpany =
    Note_Instrument_Timpany;
  static constexpr Instrument Cymbal =
    Note_Instrument_Cymbal;
  static inline bool Instrument_IsValid(int value) {
    return Note_Instrument_IsValid(value);
  }
  static constexpr Instrument Instrument_MIN =
    Note_Instrument_Instrument_MIN;
  static constexpr Instrument Instrument_MAX =
    Note_Instrument_Instrument_MAX;
  static constexpr int Instrument_ARRAYSIZE =
    Note_Instrument_Instrument_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Instrument_descriptor() {
    return Note_Instrument_descriptor();
  }
  template<typename T>
  static inline const std::string& Instrument_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Instrument>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Instrument_Name.");
    return Note_Instrument_Name(enum_t_value);
  }
  static inline bool Instrument_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Instrument* value) {
    return Note_Instrument_Parse(name, value);
  }

  typedef Note_Volume Volume;
  static constexpr Volume MF =
    Note_Volume_MF;
  static constexpr Volume PPP =
    Note_Volume_PPP;
  static constexpr Volume PP =
    Note_Volume_PP;
  static constexpr Volume P =
    Note_Volume_P;
  static constexpr Volume MP =
    Note_Volume_MP;
  static constexpr Volume F =
    Note_Volume_F;
  static constexpr Volume FF =
    Note_Volume_FF;
  static constexpr Volume FFF =
    Note_Volume_FFF;
  static inline bool Volume_IsValid(int value) {
    return Note_Volume_IsValid(value);
  }
  static constexpr Volume Volume_MIN =
    Note_Volume_Volume_MIN;
  static constexpr Volume Volume_MAX =
    Note_Volume_Volume_MAX;
  static constexpr int Volume_ARRAYSIZE =
    Note_Volume_Volume_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Volume_descriptor() {
    return Note_Volume_descriptor();
  }
  template<typename T>
  static inline const std::string& Volume_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Volume>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Volume_Name.");
    return Note_Volume_Name(enum_t_value);
  }
  static inline bool Volume_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Volume* value) {
    return Note_Volume_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPitchFieldNumber = 1,
    kDurationFieldNumber = 2,
    kInstrumentFieldNumber = 3,
    kVolFieldNumber = 4,
    kPizzFieldNumber = 7,
    kTrFieldNumber = 8,
    kTrLastFieldNumber = 9,
  };
  // uint32 pitch = 1;
  void clear_pitch();
  ::PROTOBUF_NAMESPACE_ID::uint32 pitch() const;
  void set_pitch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pitch() const;
  void _internal_set_pitch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 duration = 2;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .museprotocol.Note.Instrument instrument = 3;
  void clear_instrument();
  ::museprotocol::Note_Instrument instrument() const;
  void set_instrument(::museprotocol::Note_Instrument value);
  private:
  ::museprotocol::Note_Instrument _internal_instrument() const;
  void _internal_set_instrument(::museprotocol::Note_Instrument value);
  public:

  // .museprotocol.Note.Volume vol = 4;
  void clear_vol();
  ::museprotocol::Note_Volume vol() const;
  void set_vol(::museprotocol::Note_Volume value);
  private:
  ::museprotocol::Note_Volume _internal_vol() const;
  void _internal_set_vol(::museprotocol::Note_Volume value);
  public:

  // bool pizz = 7;
  void clear_pizz();
  bool pizz() const;
  void set_pizz(bool value);
  private:
  bool _internal_pizz() const;
  void _internal_set_pizz(bool value);
  public:

  // bool tr = 8;
  void clear_tr();
  bool tr() const;
  void set_tr(bool value);
  private:
  bool _internal_tr() const;
  void _internal_set_tr(bool value);
  public:

  // bool tr_last = 9;
  void clear_tr_last();
  bool tr_last() const;
  void set_tr_last(bool value);
  private:
  bool _internal_tr_last() const;
  void _internal_set_tr_last(bool value);
  public:

  // @@protoc_insertion_point(class_scope:museprotocol.Note)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pitch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  int instrument_;
  int vol_;
  bool pizz_;
  bool tr_;
  bool tr_last_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sequence_2eproto;
};
// -------------------------------------------------------------------

class Segment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:museprotocol.Segment) */ {
 public:
  inline Segment() : Segment(nullptr) {}
  virtual ~Segment();

  Segment(const Segment& from);
  Segment(Segment&& from) noexcept
    : Segment() {
    *this = ::std::move(from);
  }

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment& operator=(Segment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Segment& default_instance();

  static inline const Segment* internal_default_instance() {
    return reinterpret_cast<const Segment*>(
               &_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Segment& a, Segment& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Segment* New() const final {
    return CreateMaybeMessage<Segment>(nullptr);
  }

  Segment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Segment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Segment& from);
  void MergeFrom(const Segment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "museprotocol.Segment";
  }
  protected:
  explicit Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sequence_2eproto);
    return ::descriptor_table_sequence_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Segment_ChordBase ChordBase;
  static constexpr ChordBase NOT_CHANGED =
    Segment_ChordBase_NOT_CHANGED;
  static constexpr ChordBase A =
    Segment_ChordBase_A;
  static constexpr ChordBase ASharp =
    Segment_ChordBase_ASharp;
  static constexpr ChordBase B =
    Segment_ChordBase_B;
  static constexpr ChordBase C =
    Segment_ChordBase_C;
  static constexpr ChordBase CSharp =
    Segment_ChordBase_CSharp;
  static constexpr ChordBase D =
    Segment_ChordBase_D;
  static constexpr ChordBase DSharp =
    Segment_ChordBase_DSharp;
  static constexpr ChordBase E =
    Segment_ChordBase_E;
  static constexpr ChordBase F =
    Segment_ChordBase_F;
  static constexpr ChordBase FSharp =
    Segment_ChordBase_FSharp;
  static constexpr ChordBase G =
    Segment_ChordBase_G;
  static constexpr ChordBase GSharp =
    Segment_ChordBase_GSharp;
  static inline bool ChordBase_IsValid(int value) {
    return Segment_ChordBase_IsValid(value);
  }
  static constexpr ChordBase ChordBase_MIN =
    Segment_ChordBase_ChordBase_MIN;
  static constexpr ChordBase ChordBase_MAX =
    Segment_ChordBase_ChordBase_MAX;
  static constexpr int ChordBase_ARRAYSIZE =
    Segment_ChordBase_ChordBase_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChordBase_descriptor() {
    return Segment_ChordBase_descriptor();
  }
  template<typename T>
  static inline const std::string& ChordBase_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChordBase>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChordBase_Name.");
    return Segment_ChordBase_Name(enum_t_value);
  }
  static inline bool ChordBase_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChordBase* value) {
    return Segment_ChordBase_Parse(name, value);
  }

  typedef Segment_ChordSubType ChordSubType;
  static constexpr ChordSubType Major =
    Segment_ChordSubType_Major;
  static constexpr ChordSubType Minor =
    Segment_ChordSubType_Minor;
  static constexpr ChordSubType Dominant =
    Segment_ChordSubType_Dominant;
  static constexpr ChordSubType Diminished =
    Segment_ChordSubType_Diminished;
  static constexpr ChordSubType HalfDiminished =
    Segment_ChordSubType_HalfDiminished;
  static inline bool ChordSubType_IsValid(int value) {
    return Segment_ChordSubType_IsValid(value);
  }
  static constexpr ChordSubType ChordSubType_MIN =
    Segment_ChordSubType_ChordSubType_MIN;
  static constexpr ChordSubType ChordSubType_MAX =
    Segment_ChordSubType_ChordSubType_MAX;
  static constexpr int ChordSubType_ARRAYSIZE =
    Segment_ChordSubType_ChordSubType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChordSubType_descriptor() {
    return Segment_ChordSubType_descriptor();
  }
  template<typename T>
  static inline const std::string& ChordSubType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChordSubType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChordSubType_Name.");
    return Segment_ChordSubType_Name(enum_t_value);
  }
  static inline bool ChordSubType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChordSubType* value) {
    return Segment_ChordSubType_Parse(name, value);
  }

  typedef Segment_VolumeChange VolumeChange;
  static constexpr VolumeChange None =
    Segment_VolumeChange_None;
  static constexpr VolumeChange Crescendo =
    Segment_VolumeChange_Crescendo;
  static constexpr VolumeChange CrescendoLarge =
    Segment_VolumeChange_CrescendoLarge;
  static constexpr VolumeChange Dim =
    Segment_VolumeChange_Dim;
  static constexpr VolumeChange DimLarge =
    Segment_VolumeChange_DimLarge;
  static inline bool VolumeChange_IsValid(int value) {
    return Segment_VolumeChange_IsValid(value);
  }
  static constexpr VolumeChange VolumeChange_MIN =
    Segment_VolumeChange_VolumeChange_MIN;
  static constexpr VolumeChange VolumeChange_MAX =
    Segment_VolumeChange_VolumeChange_MAX;
  static constexpr int VolumeChange_ARRAYSIZE =
    Segment_VolumeChange_VolumeChange_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VolumeChange_descriptor() {
    return Segment_VolumeChange_descriptor();
  }
  template<typename T>
  static inline const std::string& VolumeChange_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VolumeChange>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VolumeChange_Name.");
    return Segment_VolumeChange_Name(enum_t_value);
  }
  static inline bool VolumeChange_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VolumeChange* value) {
    return Segment_VolumeChange_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNoteFieldNumber = 3,
    kPBarFieldNumber = 1,
    kPOffsetFieldNumber = 2,
    kCbFieldNumber = 4,
    kCtypeFieldNumber = 5,
    kVolchangeFieldNumber = 6,
    kSpeedFieldNumber = 7,
  };
  // repeated .museprotocol.Note note = 3;
  int note_size() const;
  private:
  int _internal_note_size() const;
  public:
  void clear_note();
  ::museprotocol::Note* mutable_note(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::museprotocol::Note >*
      mutable_note();
  private:
  const ::museprotocol::Note& _internal_note(int index) const;
  ::museprotocol::Note* _internal_add_note();
  public:
  const ::museprotocol::Note& note(int index) const;
  ::museprotocol::Note* add_note();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::museprotocol::Note >&
      note() const;

  // uint32 pBar = 1;
  void clear_pbar();
  ::PROTOBUF_NAMESPACE_ID::uint32 pbar() const;
  void set_pbar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pbar() const;
  void _internal_set_pbar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pOffset = 2;
  void clear_poffset();
  ::PROTOBUF_NAMESPACE_ID::uint32 poffset() const;
  void set_poffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_poffset() const;
  void _internal_set_poffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .museprotocol.Segment.ChordBase cb = 4;
  void clear_cb();
  ::museprotocol::Segment_ChordBase cb() const;
  void set_cb(::museprotocol::Segment_ChordBase value);
  private:
  ::museprotocol::Segment_ChordBase _internal_cb() const;
  void _internal_set_cb(::museprotocol::Segment_ChordBase value);
  public:

  // .museprotocol.Segment.ChordSubType ctype = 5;
  void clear_ctype();
  ::museprotocol::Segment_ChordSubType ctype() const;
  void set_ctype(::museprotocol::Segment_ChordSubType value);
  private:
  ::museprotocol::Segment_ChordSubType _internal_ctype() const;
  void _internal_set_ctype(::museprotocol::Segment_ChordSubType value);
  public:

  // .museprotocol.Segment.VolumeChange volchange = 6;
  void clear_volchange();
  ::museprotocol::Segment_VolumeChange volchange() const;
  void set_volchange(::museprotocol::Segment_VolumeChange value);
  private:
  ::museprotocol::Segment_VolumeChange _internal_volchange() const;
  void _internal_set_volchange(::museprotocol::Segment_VolumeChange value);
  public:

  // int32 speed = 7;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:museprotocol.Segment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::museprotocol::Note > note_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pbar_;
  ::PROTOBUF_NAMESPACE_ID::uint32 poffset_;
  int cb_;
  int ctype_;
  int volchange_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sequence_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Note

// uint32 pitch = 1;
inline void Note::clear_pitch() {
  pitch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Note::_internal_pitch() const {
  return pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Note::pitch() const {
  // @@protoc_insertion_point(field_get:museprotocol.Note.pitch)
  return _internal_pitch();
}
inline void Note::_internal_set_pitch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pitch_ = value;
}
inline void Note::set_pitch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:museprotocol.Note.pitch)
}

// uint32 duration = 2;
inline void Note::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Note::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Note::duration() const {
  // @@protoc_insertion_point(field_get:museprotocol.Note.duration)
  return _internal_duration();
}
inline void Note::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void Note::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:museprotocol.Note.duration)
}

// .museprotocol.Note.Instrument instrument = 3;
inline void Note::clear_instrument() {
  instrument_ = 0;
}
inline ::museprotocol::Note_Instrument Note::_internal_instrument() const {
  return static_cast< ::museprotocol::Note_Instrument >(instrument_);
}
inline ::museprotocol::Note_Instrument Note::instrument() const {
  // @@protoc_insertion_point(field_get:museprotocol.Note.instrument)
  return _internal_instrument();
}
inline void Note::_internal_set_instrument(::museprotocol::Note_Instrument value) {
  
  instrument_ = value;
}
inline void Note::set_instrument(::museprotocol::Note_Instrument value) {
  _internal_set_instrument(value);
  // @@protoc_insertion_point(field_set:museprotocol.Note.instrument)
}

// .museprotocol.Note.Volume vol = 4;
inline void Note::clear_vol() {
  vol_ = 0;
}
inline ::museprotocol::Note_Volume Note::_internal_vol() const {
  return static_cast< ::museprotocol::Note_Volume >(vol_);
}
inline ::museprotocol::Note_Volume Note::vol() const {
  // @@protoc_insertion_point(field_get:museprotocol.Note.vol)
  return _internal_vol();
}
inline void Note::_internal_set_vol(::museprotocol::Note_Volume value) {
  
  vol_ = value;
}
inline void Note::set_vol(::museprotocol::Note_Volume value) {
  _internal_set_vol(value);
  // @@protoc_insertion_point(field_set:museprotocol.Note.vol)
}

// bool pizz = 7;
inline void Note::clear_pizz() {
  pizz_ = false;
}
inline bool Note::_internal_pizz() const {
  return pizz_;
}
inline bool Note::pizz() const {
  // @@protoc_insertion_point(field_get:museprotocol.Note.pizz)
  return _internal_pizz();
}
inline void Note::_internal_set_pizz(bool value) {
  
  pizz_ = value;
}
inline void Note::set_pizz(bool value) {
  _internal_set_pizz(value);
  // @@protoc_insertion_point(field_set:museprotocol.Note.pizz)
}

// bool tr = 8;
inline void Note::clear_tr() {
  tr_ = false;
}
inline bool Note::_internal_tr() const {
  return tr_;
}
inline bool Note::tr() const {
  // @@protoc_insertion_point(field_get:museprotocol.Note.tr)
  return _internal_tr();
}
inline void Note::_internal_set_tr(bool value) {
  
  tr_ = value;
}
inline void Note::set_tr(bool value) {
  _internal_set_tr(value);
  // @@protoc_insertion_point(field_set:museprotocol.Note.tr)
}

// bool tr_last = 9;
inline void Note::clear_tr_last() {
  tr_last_ = false;
}
inline bool Note::_internal_tr_last() const {
  return tr_last_;
}
inline bool Note::tr_last() const {
  // @@protoc_insertion_point(field_get:museprotocol.Note.tr_last)
  return _internal_tr_last();
}
inline void Note::_internal_set_tr_last(bool value) {
  
  tr_last_ = value;
}
inline void Note::set_tr_last(bool value) {
  _internal_set_tr_last(value);
  // @@protoc_insertion_point(field_set:museprotocol.Note.tr_last)
}

// -------------------------------------------------------------------

// Segment

// uint32 pBar = 1;
inline void Segment::clear_pbar() {
  pbar_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Segment::_internal_pbar() const {
  return pbar_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Segment::pbar() const {
  // @@protoc_insertion_point(field_get:museprotocol.Segment.pBar)
  return _internal_pbar();
}
inline void Segment::_internal_set_pbar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pbar_ = value;
}
inline void Segment::set_pbar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pbar(value);
  // @@protoc_insertion_point(field_set:museprotocol.Segment.pBar)
}

// uint32 pOffset = 2;
inline void Segment::clear_poffset() {
  poffset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Segment::_internal_poffset() const {
  return poffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Segment::poffset() const {
  // @@protoc_insertion_point(field_get:museprotocol.Segment.pOffset)
  return _internal_poffset();
}
inline void Segment::_internal_set_poffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  poffset_ = value;
}
inline void Segment::set_poffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_poffset(value);
  // @@protoc_insertion_point(field_set:museprotocol.Segment.pOffset)
}

// repeated .museprotocol.Note note = 3;
inline int Segment::_internal_note_size() const {
  return note_.size();
}
inline int Segment::note_size() const {
  return _internal_note_size();
}
inline void Segment::clear_note() {
  note_.Clear();
}
inline ::museprotocol::Note* Segment::mutable_note(int index) {
  // @@protoc_insertion_point(field_mutable:museprotocol.Segment.note)
  return note_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::museprotocol::Note >*
Segment::mutable_note() {
  // @@protoc_insertion_point(field_mutable_list:museprotocol.Segment.note)
  return &note_;
}
inline const ::museprotocol::Note& Segment::_internal_note(int index) const {
  return note_.Get(index);
}
inline const ::museprotocol::Note& Segment::note(int index) const {
  // @@protoc_insertion_point(field_get:museprotocol.Segment.note)
  return _internal_note(index);
}
inline ::museprotocol::Note* Segment::_internal_add_note() {
  return note_.Add();
}
inline ::museprotocol::Note* Segment::add_note() {
  // @@protoc_insertion_point(field_add:museprotocol.Segment.note)
  return _internal_add_note();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::museprotocol::Note >&
Segment::note() const {
  // @@protoc_insertion_point(field_list:museprotocol.Segment.note)
  return note_;
}

// .museprotocol.Segment.ChordBase cb = 4;
inline void Segment::clear_cb() {
  cb_ = 0;
}
inline ::museprotocol::Segment_ChordBase Segment::_internal_cb() const {
  return static_cast< ::museprotocol::Segment_ChordBase >(cb_);
}
inline ::museprotocol::Segment_ChordBase Segment::cb() const {
  // @@protoc_insertion_point(field_get:museprotocol.Segment.cb)
  return _internal_cb();
}
inline void Segment::_internal_set_cb(::museprotocol::Segment_ChordBase value) {
  
  cb_ = value;
}
inline void Segment::set_cb(::museprotocol::Segment_ChordBase value) {
  _internal_set_cb(value);
  // @@protoc_insertion_point(field_set:museprotocol.Segment.cb)
}

// .museprotocol.Segment.ChordSubType ctype = 5;
inline void Segment::clear_ctype() {
  ctype_ = 0;
}
inline ::museprotocol::Segment_ChordSubType Segment::_internal_ctype() const {
  return static_cast< ::museprotocol::Segment_ChordSubType >(ctype_);
}
inline ::museprotocol::Segment_ChordSubType Segment::ctype() const {
  // @@protoc_insertion_point(field_get:museprotocol.Segment.ctype)
  return _internal_ctype();
}
inline void Segment::_internal_set_ctype(::museprotocol::Segment_ChordSubType value) {
  
  ctype_ = value;
}
inline void Segment::set_ctype(::museprotocol::Segment_ChordSubType value) {
  _internal_set_ctype(value);
  // @@protoc_insertion_point(field_set:museprotocol.Segment.ctype)
}

// .museprotocol.Segment.VolumeChange volchange = 6;
inline void Segment::clear_volchange() {
  volchange_ = 0;
}
inline ::museprotocol::Segment_VolumeChange Segment::_internal_volchange() const {
  return static_cast< ::museprotocol::Segment_VolumeChange >(volchange_);
}
inline ::museprotocol::Segment_VolumeChange Segment::volchange() const {
  // @@protoc_insertion_point(field_get:museprotocol.Segment.volchange)
  return _internal_volchange();
}
inline void Segment::_internal_set_volchange(::museprotocol::Segment_VolumeChange value) {
  
  volchange_ = value;
}
inline void Segment::set_volchange(::museprotocol::Segment_VolumeChange value) {
  _internal_set_volchange(value);
  // @@protoc_insertion_point(field_set:museprotocol.Segment.volchange)
}

// int32 speed = 7;
inline void Segment::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Segment::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Segment::speed() const {
  // @@protoc_insertion_point(field_get:museprotocol.Segment.speed)
  return _internal_speed();
}
inline void Segment::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void Segment::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:museprotocol.Segment.speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace museprotocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::museprotocol::Note_Instrument> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::museprotocol::Note_Instrument>() {
  return ::museprotocol::Note_Instrument_descriptor();
}
template <> struct is_proto_enum< ::museprotocol::Note_Volume> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::museprotocol::Note_Volume>() {
  return ::museprotocol::Note_Volume_descriptor();
}
template <> struct is_proto_enum< ::museprotocol::Segment_ChordBase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::museprotocol::Segment_ChordBase>() {
  return ::museprotocol::Segment_ChordBase_descriptor();
}
template <> struct is_proto_enum< ::museprotocol::Segment_ChordSubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::museprotocol::Segment_ChordSubType>() {
  return ::museprotocol::Segment_ChordSubType_descriptor();
}
template <> struct is_proto_enum< ::museprotocol::Segment_VolumeChange> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::museprotocol::Segment_VolumeChange>() {
  return ::museprotocol::Segment_VolumeChange_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sequence_2eproto
